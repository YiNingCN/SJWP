package com.soujuw.android.partner.Dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * DAO for table "USED_HOUSE".
 */
public class UsedHouseDao extends AbstractDao<UsedHouse, Long> {

    public static final String TABLENAME = "USED_HOUSE";

    public UsedHouseDao(DaoConfig config) {
        super(config);
    }

    ;


    public UsedHouseDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /**
     * Creates the underlying database table.
     */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists ? "IF NOT EXISTS " : "";
        db.execSQL("CREATE TABLE " + constraint + "\"USED_HOUSE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ID_REMOTE\" INTEGER," + // 1: idRemote
                "\"IMAGE_URL\" TEXT," + // 2: ImageUrl
                "\"TITLE\" TEXT," + // 3: Title
                "\"BED_ROOMS\" INTEGER," + // 4: BedRooms
                "\"LIVING_ROOMS\" INTEGER," + // 5: LivingRooms
                "\"DECORATION\" TEXT," + // 6: Decoration
                "\"PRICE\" INTEGER," + // 7: Price
                "\"DISTRICT\" TEXT," + // 8: District
                "\"RQNAME\" TEXT," + // 9: RQName
                "\"GROSS_AREA\" REAL," + // 10: GrossArea
                "\"PHOTO_COUNT\" INTEGER," + // 11: PhotoCount
                "\"FLOOR\" INTEGER," + // 12: Floor
                "\"TOP_FLOOR\" INTEGER," + // 13: TopFloor
                "\"ORIENTATION\" INTEGER," + // 14: Orientation
                "\"BUILT_YEAR\" INTEGER," + // 15: BuiltYear
                "\"LAST_EDIT\" INTEGER," + // 16: LastEdit
                "\"BATH_ROOMS\" INTEGER," + // 17: BathRooms
                "\"PUBLISHED_AT\" INTEGER," + // 18: PublishedAt
                "\"LABEL1\" TEXT," + // 19: Label1
                "\"LABEL2\" TEXT," + // 20: Label2
                "\"LABEL3\" TEXT," + // 21: Label3
                "\"LABEL4\" TEXT);"); // 22: Label4
    }

    /**
     * Drops the underlying database table.
     */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USED_HOUSE\"";
        db.execSQL(sql);
    }

    /**
     * @inheritdoc
     */
    @Override
    protected void bindValues(SQLiteStatement stmt, UsedHouse entity) {
        stmt.clearBindings();

        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }

        Integer idRemote = entity.getIdRemote();
        if (idRemote != null) {
            stmt.bindLong(2, idRemote);
        }

        String ImageUrl = entity.getImageUrl();
        if (ImageUrl != null) {
            stmt.bindString(3, ImageUrl);
        }

        String Title = entity.getTitle();
        if (Title != null) {
            stmt.bindString(4, Title);
        }

        Integer BedRooms = entity.getBedRooms();
        if (BedRooms != null) {
            stmt.bindLong(5, BedRooms);
        }

        Integer LivingRooms = entity.getLivingRooms();
        if (LivingRooms != null) {
            stmt.bindLong(6, LivingRooms);
        }

        String Decoration = entity.getDecoration();
        if (Decoration != null) {
            stmt.bindString(7, Decoration);
        }

        Integer Price = entity.getPrice();
        if (Price != null) {
            stmt.bindLong(8, Price);
        }

        String District = entity.getDistrict();
        if (District != null) {
            stmt.bindString(9, District);
        }

        String RQName = entity.getRQName();
        if (RQName != null) {
            stmt.bindString(10, RQName);
        }

        Float GrossArea = entity.getGrossArea();
        if (GrossArea != null) {
            stmt.bindDouble(11, GrossArea);
        }

        Integer PhotoCount = entity.getPhotoCount();
        if (PhotoCount != null) {
            stmt.bindLong(12, PhotoCount);
        }

        Integer Floor = entity.getFloor();
        if (Floor != null) {
            stmt.bindLong(13, Floor);
        }

        Integer TopFloor = entity.getTopFloor();
        if (TopFloor != null) {
            stmt.bindLong(14, TopFloor);
        }

        Integer Orientation = entity.getOrientation();
        if (Orientation != null) {
            stmt.bindLong(15, Orientation);
        }

        Integer BuiltYear = entity.getBuiltYear();
        if (BuiltYear != null) {
            stmt.bindLong(16, BuiltYear);
        }

        java.util.Date LastEdit = entity.getLastEdit();
        if (LastEdit != null) {
            stmt.bindLong(17, LastEdit.getTime());
        }

        Integer BathRooms = entity.getBathRooms();
        if (BathRooms != null) {
            stmt.bindLong(18, BathRooms);
        }

        java.util.Date PublishedAt = entity.getPublishedAt();
        if (PublishedAt != null) {
            stmt.bindLong(19, PublishedAt.getTime());
        }

        String Label1 = entity.getLabel1();
        if (Label1 != null) {
            stmt.bindString(20, Label1);
        }

        String Label2 = entity.getLabel2();
        if (Label2 != null) {
            stmt.bindString(21, Label2);
        }

        String Label3 = entity.getLabel3();
        if (Label3 != null) {
            stmt.bindString(22, Label3);
        }

        String Label4 = entity.getLabel4();
        if (Label4 != null) {
            stmt.bindString(23, Label4);
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }

    /**
     * @inheritdoc
     */
    @Override
    public UsedHouse readEntity(Cursor cursor, int offset) {
        UsedHouse entity = new UsedHouse( //
                cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
                cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // idRemote
                cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // ImageUrl
                cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // Title
                cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // BedRooms
                cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // LivingRooms
                cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // Decoration
                cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // Price
                cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // District
                cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // RQName
                cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10), // GrossArea
                cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11), // PhotoCount
                cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12), // Floor
                cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13), // TopFloor
                cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // Orientation
                cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15), // BuiltYear
                cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)), // LastEdit
                cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // BathRooms
                cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)), // PublishedAt
                cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19), // Label1
                cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // Label2
                cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // Label3
                cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22) // Label4
        );
        return entity;
    }

    /**
     * @inheritdoc
     */
    @Override
    public void readEntity(Cursor cursor, UsedHouse entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIdRemote(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setImageUrl(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitle(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBedRooms(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setLivingRooms(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setDecoration(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPrice(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setDistrict(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setRQName(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setGrossArea(cursor.isNull(offset + 10) ? null : cursor.getFloat(offset + 10));
        entity.setPhotoCount(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
        entity.setFloor(cursor.isNull(offset + 12) ? null : cursor.getInt(offset + 12));
        entity.setTopFloor(cursor.isNull(offset + 13) ? null : cursor.getInt(offset + 13));
        entity.setOrientation(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setBuiltYear(cursor.isNull(offset + 15) ? null : cursor.getInt(offset + 15));
        entity.setLastEdit(cursor.isNull(offset + 16) ? null : new java.util.Date(cursor.getLong(offset + 16)));
        entity.setBathRooms(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setPublishedAt(cursor.isNull(offset + 18) ? null : new java.util.Date(cursor.getLong(offset + 18)));
        entity.setLabel1(cursor.isNull(offset + 19) ? null : cursor.getString(offset + 19));
        entity.setLabel2(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setLabel3(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setLabel4(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
    }

    /**
     * @inheritdoc
     */
    @Override
    protected Long updateKeyAfterInsert(UsedHouse entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }

    /**
     * @inheritdoc
     */
    @Override
    public Long getKey(UsedHouse entity) {
        if (entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /**
     * @inheritdoc
     */
    @Override
    protected boolean isEntityUpdateable() {
        return true;
    }

    /**
     * Properties of entity UsedHouse.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property IdRemote = new Property(1, Integer.class, "idRemote", false, "ID_REMOTE");
        public final static Property ImageUrl = new Property(2, String.class, "ImageUrl", false, "IMAGE_URL");
        public final static Property Title = new Property(3, String.class, "Title", false, "TITLE");
        public final static Property BedRooms = new Property(4, Integer.class, "BedRooms", false, "BED_ROOMS");
        public final static Property LivingRooms = new Property(5, Integer.class, "LivingRooms", false, "LIVING_ROOMS");
        public final static Property Decoration = new Property(6, String.class, "Decoration", false, "DECORATION");
        public final static Property Price = new Property(7, Integer.class, "Price", false, "PRICE");
        public final static Property District = new Property(8, String.class, "District", false, "DISTRICT");
        public final static Property RQName = new Property(9, String.class, "RQName", false, "RQNAME");
        public final static Property GrossArea = new Property(10, Float.class, "GrossArea", false, "GROSS_AREA");
        public final static Property PhotoCount = new Property(11, Integer.class, "PhotoCount", false, "PHOTO_COUNT");
        public final static Property Floor = new Property(12, Integer.class, "Floor", false, "FLOOR");
        public final static Property TopFloor = new Property(13, Integer.class, "TopFloor", false, "TOP_FLOOR");
        public final static Property Orientation = new Property(14, Integer.class, "Orientation", false, "ORIENTATION");
        public final static Property BuiltYear = new Property(15, Integer.class, "BuiltYear", false, "BUILT_YEAR");
        public final static Property LastEdit = new Property(16, java.util.Date.class, "LastEdit", false, "LAST_EDIT");
        public final static Property BathRooms = new Property(17, Integer.class, "BathRooms", false, "BATH_ROOMS");
        public final static Property PublishedAt = new Property(18, java.util.Date.class, "PublishedAt", false, "PUBLISHED_AT");
        public final static Property Label1 = new Property(19, String.class, "Label1", false, "LABEL1");
        public final static Property Label2 = new Property(20, String.class, "Label2", false, "LABEL2");
        public final static Property Label3 = new Property(21, String.class, "Label3", false, "LABEL3");
        public final static Property Label4 = new Property(22, String.class, "Label4", false, "LABEL4");
    }

}
